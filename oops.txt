#include <iostream>
#include <string>
using namespace std;

class Item {
public:
    int ItemId;
    int stock;
    int maxStock;
    double price;
    string itemName;

    Item(int ItemId, int stock, double price, string itemName)
        : ItemId(ItemId), stock(stock), price(price), itemName(itemName), maxStock(100) {}

    bool buy(int orderQuantity) {
        cout << itemName << " stock=" << stock << " ordered quantity=" << orderQuantity << endl;
        if (orderQuantity <= stock) {
            cout << "Your order for " << itemName << " is placed with quantity=" << orderQuantity << endl;
            stock -= orderQuantity;
            return true;
        } else {
            cout << "Out of stock: " << itemName << ", couldn't place your order" << endl;
            return false;
        }
    }

    int generateStockOrder() {
        return maxStock - stock;
    }

    virtual void display() {
        cout << "itemName: " << itemName << " price=" << price << endl;
    }
};

class ElectronicGadget : public Item {
public:
    string companyName;

    ElectronicGadget(int ItemId, int stock, double price, string itemName, string companyName)
        : Item(ItemId, stock, price, itemName), companyName(companyName) {}

    void display() override {
        Item::display();
        cout << "Company Name: " << companyName << endl;
    }
};

class Book : public Item {
public:
    string author;

    Book(int ItemId, int stock, double price, string itemName, string author)
        : Item(ItemId, stock, price, itemName), author(author) {}

    void display() override {
        Item::display();
        cout << "Author: " << author << endl;
    }
};

class Shop {
public:
    Item** itemArr;
    int itemTypeCount;
    string owner;

    Shop(Item** itemArr, int size, string owner)
        : itemArr(itemArr), itemTypeCount(size), owner(owner) {}

    void displayItems() {
        cout << "Items in the shop**************" << endl;
        for (int i = 0; i < itemTypeCount; i++)
            itemArr[i]->display();
    }

    void buyFromShop(int itemId, int quantity) {
        bool searchFlag = false;
        for (int i = 0; i < itemTypeCount; i++) {
            if (itemId == itemArr[i]->ItemId) {
                itemArr[i]->buy(quantity);
                searchFlag = true;
                break;
            }
        }
        if (!searchFlag)
            cout << "Item not found" << endl;
    }

    void generateAllItemStockOrder() {
        cout << "Following are the orders for stock from shop owner: " << owner << endl;
        for (int i = 0; i < itemTypeCount; i++) {
            int shortage = itemArr[i]->generateStockOrder();
            cout << itemArr[i]->itemName << " Quantity required = " << shortage << endl;
        }
    }
};

int main() {
    Item* itemsArr[] = {
        new ElectronicGadget(1, 50, 555, "Pendrive", "HP"),
        new Book(2, 70, 300, "C++", "ABC"),
        new Book(3, 40, 100, "Vikas", "XYZ"),
        new ElectronicGadget(4, 100, 15555, "Mobile", "MI")
    };

    Shop myShop(itemsArr, 4, "SSS");
    myShop.displayItems();

    cout << "\nLet's do some shopping************" << endl;
    myShop.buyFromShop(1, 50);
    myShop.buyFromShop(3, 70);
    myShop.buyFromShop(2, 80);
    myShop.buyFromShop(4, 10);

    cout << "\nEnd of the day: Shop owner places order for stocks************" << endl;
    myShop.generateAllItemStockOrder();

    // Free memory allocated with 'new'
    for (int i = 0; i < 4; i++)
        delete itemsArr[i];

    return 0;
}


#include <iostream>
#include <string>
using namespace std;

class Item {
public:
    int ItemId;
    int stock;
    int maxStock;
    double price;
    string itemName;

    Item(int ItemId, int stock, double price, string itemName)
        : ItemId(ItemId), stock(stock), price(price), itemName(itemName), maxStock(100) {}

    bool buy(int orderQuantity) {
        cout << itemName << " stock=" << stock << " ordered quantity=" << orderQuantity << endl;
        if (orderQuantity < stock) {
            cout << "Your order for " << itemName << " is placed with quantity=" << orderQuantity << endl;
            stock = stock - orderQuantity;
            return true;
        } else {
            cout << "Out of stock: " << itemName << ", couldn't place your order" << endl;
            return false;
        }
    }

    int generateStockOrder() {
        return maxStock - stock;
    }

    virtual void display() {
        cout << "itemName: " << itemName << " price=" << price;
    }
};

class ElectronicGadget : public Item {
public:
    string companyName;

    ElectronicGadget(int ItemId, int stock, double price, string itemName, string companyName)
        : Item(ItemId, stock, price, itemName), companyName(companyName) {}

    void display() override {
        Item::display();
        cout << " company Name- " << companyName << endl;
    }
};

class Book : public Item {
public:
    string author;

    Book(int ItemId, int stock, double price, string itemName, string author)
        : Item(ItemId, stock, price, itemName), author(author) {}

    void display() override {
        Item::display();
        cout << " Author- " << author << endl;
    }
};

class Shop {
public:
    Item** itemArr;
    int itemTypeCount;
    string owner;

    Shop(Item** itemArr, int size, string owner)
        : itemArr(itemArr), itemTypeCount(size), owner(owner) {}

    void displayItems() {
        for (int i = 0; i < itemTypeCount; i++)
            itemArr[i]->display();
    }

    void buyFromShop(int itemId, int quantity) {
        bool searchFlag = false;
        for (int i = 0; i < itemTypeCount; i++) {
            if (itemId == itemArr[i]->ItemId) {
                itemArr[i]->buy(quantity);
                searchFlag = true;
            }
        }
        if (searchFlag == false)
            cout << "Item not found" << endl;
    }

    void generateAllItemStockOrder() {
        cout << "Following are the orders for stock from shop Owner: " << owner << endl;
        for (int i = 0; i < itemTypeCount; i++) {
            int shortage = itemArr[i]->generateStockOrder();
            cout << itemArr[i]->itemName << " Quantity required= " << shortage << endl;
        }
    }
};

int main() {
    Item* itemsArr[] = {
        new ElectronicGadget(1, 50, 555, "pendrive", "HP"),
        new Book(2, 70, 300, "C++", "abc"),
        new Book(3, 40, 100, "vikas", "xyz"),
        new ElectronicGadget(4, 100, 15555, "mobile", "mi")
    };

    Shop myShop(itemsArr, 4, "sss");
    cout << "Items in the shop**************" << endl;
    myShop.displayItems();
    cout << endl;
    cout << "Let's do some shopping************" << endl;
    myShop.buyFromShop(1, 50);
    myShop.buyFromShop(3, 70);
    myShop.buyFromShop(2, 80);
    myShop.buyFromShop(4, 10);
    cout << endl;
    cout << "End of the day: shop owner places order for stocks************" << endl;
    myShop.generateAllItemStockOrder();

    // Cleanup - deallocate memory
    for (int i = 0; i < 4; i++) {
        delete itemsArr[i];
    }

    return 0;
}


________________________________________________________________________
Consider a Customer(customerId, customerName, phoneNum, billAmount ) and
the shop classifies customer as regular customer and privileged customer. The
shop offers discount of 5% on every purchase by a regular customer and it issues
a membership card to a privileged customer and offer will be always better than
regular customer. The shop prepares a list of customers (regular and privileged
randomly) visited shop and view the bill amount of individual customer and total
bill amount of all the customers. Display count of regular customers and
privileged customers. Identify exceptions and manage.


#include <iostream>
using namespace std;

class Customer {
public:
    int customerId;
    string customerName;
    long long int phoneNum;
    float billAmount;
    static int id;

    Customer() {
        billAmount = 0;
        customerId = -1;
    }

    void getDetails() {
        cout << "Enter Name: ";
        cin >> customerName;
        cout << "Enter Phone Number: ";
        cin >> phoneNum;
        cout << "Enter Bill Amount: ";
        cin >> billAmount;
        customerId = id++;
    }

    virtual void printDetails() {
        cout << "ID: " << customerId << endl;
        cout << "Name: " << customerName << endl;
        cout << "PhoneNo: " << phoneNum << endl;
    }

    virtual float generateBill() = 0;
};

int Customer::id = 0;

class RegularCustomer : public Customer {
public:
    static int cnt;

    RegularCustomer() {
        ++cnt;
    }

    float generateBill() {
        return billAmount - (0.05 * billAmount);
    }
};

int RegularCustomer::cnt = 0;

class PrivilegedCustomer : public Customer {
public:
    static int cnt;
    int memCardNo;

    PrivilegedCustomer() {
        ++cnt;
        memCardNo = customerId + cnt + 10;
    }

    float generateBill() {
        return billAmount - (0.1 * billAmount);
    }

    void printDetails() {
        cout << "---PRIVILEGED CUSTOMER---" << endl;
        Customer::printDetails();
        cout << "Mem Card No: " << memCardNo << endl;
    }
};

int PrivilegedCustomer::cnt = 0;

class Shop {
public:
    class StackOverflow {};

    Customer* ptr[10];
    static int pos;

    ~Shop() {
        cout << "Deleting base pointer stack" << endl;
        for (int i = 0; i < pos; i++)
            delete ptr[i];
    }

    void prepareList() {
        int x;
        cout << "Enter number of customers: ";
        try {
            cin >> x;
            if (pos + x > 10)
                throw StackOverflow();
            else {
                x = pos + x;
                for (int i = pos; i < x; i++) {
                    int y;
                    cout << "Enter 1 for regular customer or 2 for privileged customer: ";
                    cin >> y;
                    if (y == 1) {
                        ptr[i] = new RegularCustomer;
                        ptr[i]->getDetails();
                        pos++;
                    } else {
                        ptr[i] = new PrivilegedCustomer;
                        ptr[i]->getDetails();
                        pos++;
                    }
                }
            }
        } catch (StackOverflow e) {
            cout << "Customer Stack Overflow" << endl;
        }
    }

    void viewBill(int id) {
        int flag = 0;
        for (int i = 0; i < pos; i++) {
            if (ptr[i]->customerId == id) {
                flag = 1;
                ptr[i]->printDetails();
                cout << "Bill Amount: " << ptr[i]->generateBill() << endl;
                break;
            }
        }
        if (flag == 0) {
            cout << "Customer Id not found in the list" << endl;
        }
    }

    void viewBill() {
        float total = 0, distotal = 0;
        cout << "Bill Amount\tAfter Discount" << endl;
        for (int i = 0; i < pos; i++) {
            cout << ptr[i]->billAmount << "\t\t" << ptr[i]->generateBill() << endl;
            total += ptr[i]->billAmount;
            distotal += ptr[i]->generateBill();
        }
        cout << "Total Billed Amount: " << total << "\tDiscount Bill: " << distotal << endl;
    }

    void displayCount() {
        cout << "Total Regular Customers: " << RegularCustomer::cnt << endl;
        cout << "Total Privileged Customers: " << PrivilegedCustomer::cnt << endl;
    }
};

int Shop::pos = 0;

int main() {
    Shop s1;
    int flag = 1;
    while (flag) {
        int c, id;
        cout << "Enter:\n 1: Generate List\n 2: View Bill (id)\n 3: View Total Bill\n 4: Display Count\n 5: Exit\n";
        cin >> c;
        switch (c) {
            case 1:
                s1.prepareList();
                break;
            case 2:
                cout << "Enter id to be searched: ";
                cin >> id;
                s1.viewBill(id);
                break;
            case 3:
                s1.viewBill();
                break;
            case 4:
                s1.displayCount();
                break;
            case 5:
                flag = 0;
                break;
            default:
                cout << "Enter valid input" << endl;
                break;
        }
    }
    return 0;
}
_________________________________________________
Consider a book shop. The shop contains a number of items like books, DVDs,

OOP student drive folder link Links OOP 19-20 Practice Programs OOP 19-20

Stationaries which are sold every day.
Shopkeeper maintains the total number of each type of items sold, all items sold
and the total amount generated from the sale.
Shop keeper also maintains information about regular customers and items that
are purchased by them.
Shopkeeper provides discounts based on the number of items being purchased
by the customer.
Create appropriate classes with constructor, static and non-static members,
objects and test the programs to demonstrate above capabilities.

#include<iostream>
#include<string>
using namespace std;
#define MAXSIZE 100

class ShopItem {
protected:
    float soldPrice = 0;
    bool availability = true;
    int id;

public:
    virtual float getPrice(int discount) = 0;
    virtual void display() = 0;
    virtual string getType() = 0;

    bool getAvailability() {
        return availability;
    }

    void markAsSoldout() {
        availability = false;
    }

    bool matchItemId(int id) {
        return this->id == id ? true : false;
    }

    float getSoldPrice() {
        return soldPrice;
    }
};

class Book : public ShopItem {
private:
    string title;
    int numberOfPages;
    static float perPageValue;
    static int counter;
    static string type;

public:
    Book(string title, int pages) : title(title), numberOfPages(pages) {
        id = ++counter;
    }

    float getPrice(int discount) {
        float price = numberOfPages * perPageValue;
        soldPrice = price * (100.0 - discount) / 100.0;
        return price;
    }

    void display() {
        cout << "Book title: " << title << " id: " << id << " sold price: Rs" << soldPrice << endl;
    }

    string getType() {
        return type;
    }
};

string Book::type = "book";
float Book::perPageValue = 0.4;
int Book::counter = 0;

class Stationary : public ShopItem {
private:
    string stationaryItem;
    static int counter;
    static string type;

public:
    Stationary(string s) : stationaryItem(s) {
        id = ++counter;
    }

    float getPrice(int discount) {
        // no discount for stationary
        if (stationaryItem == "sheetsBundle")
            soldPrice = 5;
        else if (stationaryItem == "plasticBox")
            soldPrice = 30;
        else
            soldPrice = 0;
        return soldPrice;
    }

    void display() {
        cout << "Stationary Item: " << stationaryItem << " id: " << id << " sold price: Rs" << soldPrice << endl;
    }

    string getType() {
        return type;
    }
};

string Stationary::type = "Stationary";
int Stationary::counter = 0;

class DVD : public ShopItem {
private:
    string subject;
    int numberOfLessons;
    static float perLessonValue;
    static int counter;
    static string type;

public:
    DVD(string subject, int n) : subject(subject), numberOfLessons(n) {
        id = ++counter;
    }

    float getPrice(int discount) {
        float price = numberOfLessons * perLessonValue;
        soldPrice = price * (100.0 - discount) / 100.0;
        return price;
    }

    void display() {
        cout << "DVD subject: " << subject << " id: " << id << " sold price: Rs" << soldPrice << endl;
    }

    string getType() {
        return type;
    }
};

string DVD::type = "dvd";
float DVD::perLessonValue = 50;
int DVD::counter = 0;

class RegularCustomer {
private:
    string name;
    long mobNum;
    ShopItem* purchasedItems[MAXSIZE];
    int purchaseCount = 0;

public:
    RegularCustomer(string name, long mobNum) : name(name), mobNum(mobNum) {
    }

    void display() {
        cout << "Customer name: " << name << " mobile number: " << mobNum << endl;
        for (int i = 0; i < purchaseCount; i++) {
            cout << "Purchased ";
            purchasedItems[i]->display();
        }
    }

    bool matchMobileNumber(long num) {
        return num == mobNum ? true : false;
    }

    void addPurchasedItem(ShopItem* t) {
        if (purchaseCount < MAXSIZE) {
            purchasedItems[purchaseCount] = t;
            purchaseCount++;
        }
    }

    int getPurchaseCount() {
        return purchaseCount;
    }
};

class Shop {
private:
    string owner;
    ShopItem* items[MAXSIZE];
    int itemCount = 0;
    RegularCustomer* regularCustomers[MAXSIZE];
    int regularCustomerCount = 0;

public:
    Shop(string owner) : owner(owner) {
    }

    void addItem(ShopItem* t) {
        if (itemCount < MAXSIZE) {
            items[itemCount] = t;
            itemCount++;
        }
    }

    void addRegularCustomer(RegularCustomer* r) {
        if (regularCustomerCount < MAXSIZE) {
            regularCustomers[regularCustomerCount] = r;
            regularCustomerCount++;
        }
    }

    void displayAllItems() {
        cout << "Displaying all items:" << endl;
        for (int i = 0; i < itemCount; i++) {
            cout << i + 1 << ") ";
            items[i]->display();
        }
    }

    void displayAllRegularCustomer() {
        cout << "Displaying all regular customers:" << endl;
        for (int i = 0; i < regularCustomerCount; i++) {
            cout << i + 1 << ") ";
            regularCustomers[i]->display();
        }
    }

    void sellAnItem(int itemId, string itemChoice, long customerMobile) {
        int itemFlag = -1, regularCustomerFlag = -1, discount = 0;
        // search if customer is regular based on mobile number
        for (int i = 0; i < regularCustomerCount; i++) {
            if (regularCustomers[i]->matchMobileNumber(customerMobile)) {
                regularCustomerFlag = i;
                discount = 10;
                break;
            }
        }
        // search if item with given id is available
        for (int i = 0; i < itemCount; i++) {
            if (items[i]->matchItemId(itemId) && items[i]->getAvailability() && items[i]->getType() == itemChoice) {
                itemFlag = i;
                break;
            }
        }
        // flag indicates if item found and not yet sold
        if (itemFlag != -1) {
            // check if it's a regular customer to whom item is sold
            if (regularCustomerFlag != -1) {
                if (regularCustomers[regularCustomerFlag]->getPurchaseCount() < 2)
                    discount = 10;
                else
                    discount = 15;

                regularCustomers[regularCustomerFlag]->addPurchasedItem(items[itemFlag]);
            }
            items[itemFlag]->getPrice(discount); // this will calculate soldprice
            items[itemFlag]->markAsSoldout();
            cout << "Sold item with id = " << itemId << " to customer with mobile num = " << customerMobile << " discount = " << discount << endl;
            cout << "Sold item detail: ";
            items[itemFlag]->display();

        }
        else {
            cout << "Item with id = " << itemId << " is either sold out or not available" << endl;
        }
    }

    void displaySaleDetails(int itemChoice) {
        float saleAmount = 0;
        cout << "--Displaying details of sold ";

        if (itemChoice == 1)
            cout << "books" << endl;
        else if (itemChoice == 2)
            cout << "stationery" << endl;
        else if (itemChoice == 3)
            cout << "DVDs" << endl;
        else
            cout << "all items" << endl;

        for (int i = 0; i < itemCount; i++) {
            if (!items[i]->getAvailability()) { // getAvailability() returns false, then item is sold out
                if (itemChoice == 1) {
                    if (items[i]->getType() == "book") {
                        items[i]->display();
                        saleAmount += items[i]->getSoldPrice();
                    }
                }
                else if (itemChoice == 2) {
                    if (items[i]->getType() == "Stationary") {
                        items[i]->display();
                        saleAmount += items[i]->getSoldPrice();
                    }
                }
                else if (itemChoice == 3) {
                    if (items[i]->getType() == "dvd") {
                        items[i]->display();
                        saleAmount += items[i]->getSoldPrice();
                    }
                }
                else {
                    items[i]->display();
                    saleAmount += items[i]->getSoldPrice();
                }
            }
        }
        cout << "**** Sale amount = " << saleAmount << endl;
    }
};

int main() {
    Shop* vijaya = new Shop("vijay");
    vijaya->addItem(new Book("b1", 300));
    vijaya->addItem(new DVD("cpp", 8));
    vijaya->addItem(new Book("b2", 300));
    vijaya->addItem(new DVD("ML", 6));
    vijaya->addItem(new Stationary("sheetsBundle"));
    vijaya->addItem(new Stationary("plasticBox"));
    vijaya->addItem(new Book("b3", 300));
    vijaya->addItem(new Book("b4", 300));
    vijaya->addItem(new Book("b5", 400));
    vijaya->addRegularCustomer(new RegularCustomer("aaa", 99990L));
    vijaya->addRegularCustomer(new RegularCustomer("bbb", 99991L));
    vijaya->addRegularCustomer(new RegularCustomer("aaa", 99993L));

    cout << "--- Display all items before sale --" << endl;
    vijaya->displayAllItems();
    cout << endl << "--- Display all regular customers before sale --" << endl;
    vijaya->displayAllRegularCustomer();
    cout << endl << "--- Selling some items now --" << endl;
    vijaya->sellAnItem(3, "book", 99991);
    vijaya->sellAnItem(3, "book", 99994);
    vijaya->sellAnItem(1, "dvd", 99991);
    vijaya->sellAnItem(2, "dvd", 99992);
    vijaya->sellAnItem(2, "Stationary", 99992);
    vijaya->sellAnItem(6, "book", 99992);
    vijaya->sellAnItem(1, "book", 99992);
    vijaya->sellAnItem(2, "book", 99993);
    vijaya->sellAnItem(4, "book", 99993);
    vijaya->sellAnItem(1, "dvd", 99993);

    cout << endl << "--- Display all items after sale --" << endl;
    vijaya->displayAllItems();
    cout << endl << "--- Display all regular customers after sale --" << endl;
    vijaya->displayAllRegularCustomer();
    cout << endl << "--- Displaying sale details --" << endl;
    vijaya->displaySaleDetails(1);
    vijaya->displaySaleDetails(2);
    vijaya->displaySaleDetails(3);
    vijaya->displaySaleDetails(4);

    delete vijaya;
    return 0;
}


Sample Input

saveChangesInTheEditor
Sample Output

5
Explanation

String s  contains five words:

save
Changes
In
The
Editor                                                                                                                                                                               write the c++ code in hackerrank
